rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Reglas para usuarios
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Reglas para actividad de usuarios
    match /user_activity/{activityId} {
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Reglas para análisis individuales
    match /individual_analysis/{analysisId} {
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Reglas para análisis de combinaciones
    match /combination_analysis/{analysisId} {
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Reglas para predicciones ML
    match /ml_predictions/{predictionId} {
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Reglas para combinaciones de usuarios
    match /user_combinations/{combinationId} {
      allow create, update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true);
    }
    
    // Reglas para resultados de lotería (solo lectura para usuarios, escritura para funciones)
    match /lottery_results/{resultId} {
      allow read: if request.auth != null;
      allow write: if false; // Solo Cloud Functions pueden escribir
    }
    
    // Reglas para logs de notificaciones (solo admin)
    match /notification_logs/{logId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow write: if false; // Solo Cloud Functions pueden escribir
    }
    
    // Reglas para logs de email (solo admin)
    match /email_logs/{logId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow write: if false; // Solo Cloud Functions pueden escribir
    }
    
    // Denegar acceso por defecto a cualquier otra colección
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
