// inicializacion-unificada.js
// Sistema unificado de inicializaci√≥n para sugeridas.html

import { generarPrediccionPersonalizada } from './mlPredictor.js';
import { cargarDatosHistoricos, analizarSumaNumeros, analizarParesImpares, analizarDecadaPorPosicion } from './dataParser.js';

console.log('üöÄ Inicializando sistema unificado...');

// Hacer funciones disponibles globalmente
window.generarPrediccionPersonalizada = generarPrediccionPersonalizada;
window.cargarDatosHistoricos = cargarDatosHistoricos;
window.analizarSumaNumeros = analizarSumaNumeros;
window.analizarParesImpares = analizarParesImpares;
window.analizarDecadaPorPosicion = analizarDecadaPorPosicion;

// Funci√≥n para generar predicciones por sorteo usando el sistema de IA de 5 m√©todos
window.generarPrediccionesPorSorteo = async function() {
  console.log('ü§ñ Iniciando generaci√≥n de predicciones con IA...');
  
  try {
    // Obtener el ID del usuario actual
    const userId = window.usuarioActualID || window.currentUserId || 'usuario-demo';
    console.log('üë§ Usuario ID:', userId);
    
    // Cargar datos hist√≥ricos si no est√°n disponibles
    if (!window.datosHistoricos) {
      console.log('üìä Cargando datos hist√≥ricos...');
      window.datosHistoricos = await cargarDatosHistoricos('todos');
    }
    
    if (!window.datosHistoricos) {
      throw new Error('No se pudieron cargar los datos hist√≥ricos');
    }
    
    console.log('‚úÖ Datos hist√≥ricos disponibles:', Object.keys(window.datosHistoricos));
    
    // Actualizar mensaje de estado
    const mensajeEstado = document.getElementById('mensaje-estado');
    if (mensajeEstado) {
      mensajeEstado.textContent = 'Generando predicciones con IA...';
    }
    
    // Generar predicciones para cada sorteo
    const sorteos = ['melate', 'revancha', 'revanchita'];
    
    for (const sorteo of sorteos) {
      try {
        console.log(`üéØ Generando predicci√≥n para ${sorteo}...`);
        
        const elementoCombo = document.getElementById(`combinacion-${sorteo}`);
        const datosSorteo = window.datosHistoricos[sorteo];
        
        if (!datosSorteo) {
          console.warn(`‚ö†Ô∏è No hay datos para ${sorteo}`);
          if (elementoCombo) {
            elementoCombo.textContent = 'Sin datos disponibles';
          }
          continue;
        }
        
        // Mostrar spinner mientras se procesa
        if (elementoCombo) {
          elementoCombo.innerHTML = '<span class="animate-pulse">Analizando datos...</span>';
        }
        
        // Generar predicci√≥n personalizada usando los 5 m√©todos de an√°lisis
        const prediccion = await generarPrediccionPersonalizada(userId, datosSorteo);
        
        if (elementoCombo && prediccion && prediccion.length === 6) {
          elementoCombo.textContent = prediccion.join(' - ');
          console.log(`‚úÖ Predicci√≥n IA para ${sorteo} generada:`, prediccion);
          
          // Almacenar la predicci√≥n para uso futuro
          if (!window.prediccionesAlmacenadas) {
            window.prediccionesAlmacenadas = {};
          }
          
          window.prediccionesAlmacenadas[sorteo] = {
            userId: userId,
            prediccion: prediccion,
            ultimoSorteo: datosSorteo.ultimoSorteo || 'desconocido',
            timestamp: new Date().getTime()
          };
          
          // Guardar en localStorage si la funci√≥n est√° disponible
          if (typeof guardarPrediccionesAlmacenadas === 'function') {
            guardarPrediccionesAlmacenadas();
          }
        }
      } catch (error) {
        console.error(`‚ùå Error generando predicci√≥n para ${sorteo}:`, error);
        const elementoCombo = document.getElementById(`combinacion-${sorteo}`);
        if (elementoCombo) {
          elementoCombo.textContent = 'Error al generar';
        }
      }
    }
    
    if (mensajeEstado) {
      mensajeEstado.textContent = 'Predicciones generadas con an√°lisis completo de 5 m√©todos';
    }
    
    console.log('‚úÖ Predicciones generadas exitosamente');
    
  } catch (error) {
    console.error('‚ùå Error en el sistema de predicci√≥n:', error);
    const mensajeEstado = document.getElementById('mensaje-estado');
    if (mensajeEstado) {
      mensajeEstado.textContent = 'Error al generar predicciones';
    }
  }
};

// Funci√≥n para generar proyecciones de an√°lisis
window.generarProyeccionesAnalisis = async function() {
  console.log('üìä Iniciando generaci√≥n de proyecciones de an√°lisis...');
  
  try {
    // Obtener el ID del usuario actual
    const userId = window.usuarioActualID || window.currentUserId || 'usuario-demo';
    console.log('üë§ Usuario ID para an√°lisis:', userId);
    
    // Cargar datos hist√≥ricos si no est√°n disponibles
    if (!window.datosHistoricos) {
      console.log('üìä Cargando datos hist√≥ricos para an√°lisis...');
      window.datosHistoricos = await cargarDatosHistoricos('todos');
    }
    
    if (!window.datosHistoricos) {
      throw new Error('No se pudieron cargar los datos hist√≥ricos para an√°lisis');
    }
    
    console.log('‚úÖ Datos hist√≥ricos disponibles para an√°lisis:', Object.keys(window.datosHistoricos));
    
    // Generar proyecciones para cada sorteo usando un ID √∫nico para an√°lisis
    const sorteos = ['melate', 'revancha', 'revanchita'];
    
    for (const sorteo of sorteos) {
      try {
        console.log(`üìà Generando proyecci√≥n de an√°lisis para ${sorteo}...`);
        
        const elementoProyeccion = document.getElementById(`proyeccion-${sorteo}`);
        const elementoDetalle = document.getElementById(`detalle-${sorteo}`);
        const datosSorteo = window.datosHistoricos[sorteo];
        
        if (!datosSorteo) {
          console.warn(`‚ö†Ô∏è No hay datos para an√°lisis de ${sorteo}`);
          if (elementoProyeccion) {
            elementoProyeccion.textContent = 'Sin datos disponibles';
          }
          if (elementoDetalle) {
            elementoDetalle.textContent = 'Error al cargar los datos';
          }
          continue;
        }
        
        // Mostrar spinner mientras se procesa
        if (elementoProyeccion) {
          elementoProyeccion.innerHTML = '<span class="animate-pulse">Analizando...</span>';
        }
        if (elementoDetalle) {
          elementoDetalle.textContent = 'Procesando an√°lisis estad√≠stico...';
        }
        
        // Usar un ID diferente para proyecciones (an√°lisis) vs predicciones
        const userIdAnalisis = `${userId}-analisis`;
        
        // Generar proyecci√≥n usando el sistema de IA
        const proyeccion = await generarPrediccionPersonalizada(userIdAnalisis, datosSorteo);
        
        if (elementoProyeccion && proyeccion && proyeccion.length === 6) {
          elementoProyeccion.textContent = proyeccion.join(' - ');
          console.log(`‚úÖ Proyecci√≥n de an√°lisis para ${sorteo} generada:`, proyeccion);
          
          // Generar descripci√≥n del an√°lisis
          if (elementoDetalle) {
            const descripcion = `Basado en estad√≠sticas, patrones, probabilidad, desviaci√≥n est√°ndar y delta`;
            elementoDetalle.textContent = descripcion;
          }
          
          // Almacenar la proyecci√≥n para uso futuro
          if (!window.proyeccionesAlmacenadas) {
            window.proyeccionesAlmacenadas = {};
          }
          
          window.proyeccionesAlmacenadas[sorteo] = {
            userId: userIdAnalisis,
            proyeccion: proyeccion,
            ultimoSorteo: datosSorteo.ultimoSorteo || 'desconocido',
            timestamp: new Date().getTime()
          };
        }
      } catch (error) {
        console.error(`‚ùå Error generando proyecci√≥n de an√°lisis para ${sorteo}:`, error);
        const elementoProyeccion = document.getElementById(`proyeccion-${sorteo}`);
        const elementoDetalle = document.getElementById(`detalle-${sorteo}`);
        if (elementoProyeccion) {
          elementoProyeccion.textContent = 'Error al generar';
        }
        if (elementoDetalle) {
          elementoDetalle.textContent = 'Intente nuevamente';
        }
      }
    }
    
    console.log('‚úÖ Proyecciones de an√°lisis generadas exitosamente');
    
  } catch (error) {
    console.error('‚ùå Error en el sistema de an√°lisis:', error);
    ['melate', 'revancha', 'revanchita'].forEach(sorteo => {
      const elementoProyeccion = document.getElementById(`proyeccion-${sorteo}`);
      const elementoDetalle = document.getElementById(`detalle-${sorteo}`);
      if (elementoProyeccion) {
        elementoProyeccion.textContent = 'Error inesperado';
      }
      if (elementoDetalle) {
        elementoDetalle.textContent = 'Intente nuevamente m√°s tarde';
      }
    });
  }
};

console.log('‚úÖ Sistema unificado inicializado correctamente');
