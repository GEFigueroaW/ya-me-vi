// === dataParserGlobal.js ===
// M√≥dulo de compatibilidad para exponer funciones de dataParser.js globalmente
// Facilita el uso de funciones de an√°lisis en archivos HTML sin m√≥dulos ES6

// Importar las funciones del m√≥dulo principal
import { analizarSumaNumeros, analizarParesImpares } from './dataParser.js';
import { generarPrediccionPorFrecuencia } from './dataParser.js';

// Exponer las funciones globalmente para que est√©n disponibles en el contexto global
// y puedan ser usadas desde archivos HTML sin necesidad de import/export
window.analizarSumaNumeros = analizarSumaNumeros;
window.analizarParesImpares = analizarParesImpares;
window.generarPrediccionPorFrecuencia = generarPrediccionPorFrecuencia;

// Intentar importar la funci√≥n analizarDecadaPorPosicion
// Esta funci√≥n puede no estar exportada correctamente en dataParser.js
try {
  // Importaci√≥n din√°mica como alternativa
  import('./dataParser.js').then(module => {
    if (module.analizarDecadaPorPosicion) {
      window.analizarDecadaPorPosicion = module.analizarDecadaPorPosicion;
      console.log('‚úÖ Funci√≥n analizarDecadaPorPosicion importada correctamente');
    } else {
      console.warn('‚ö†Ô∏è La funci√≥n analizarDecadaPorPosicion no est√° disponible para exportaci√≥n');
      
      // Implementar una versi√≥n alternativa si no est√° disponible
      window.analizarDecadaPorPosicion = function(datos) {
        console.log('üîÑ Usando versi√≥n alternativa de analizarDecadaPorPosicion');
        // Esta es una implementaci√≥n m√≠nima basada en la original
        const decadas = ['1-10', '11-20', '21-30', '31-40', '41-50', '51-56'];
        const posiciones = [0,1,2,3,4,5];
        const nombresPos = ['1er N√∫mero','2do N√∫mero','3er N√∫mero','4to N√∫mero','5to N√∫mero','6to N√∫mero'];
        const resultado = {};
        
        Object.entries(datos).forEach(([sorteo, datosIndividuales]) => {
          if (!datosIndividuales || !datosIndividuales.sorteos) return;
          
          const decadasPorPosicion = posiciones.map(pos => {
            // Contar frecuencias de d√©cada para esta posici√≥n
            const cuenta = { '1-10':0, '11-20':0, '21-30':0, '31-40':0, '41-50':0, '51-56':0 };
            datosIndividuales.sorteos.forEach(sorteoData => {
              const num = sorteoData.numeros[pos];
              if (num <= 10) cuenta['1-10']++;
              else if (num <= 20) cuenta['11-20']++;
              else if (num <= 30) cuenta['21-30']++;
              else if (num <= 40) cuenta['31-40']++;
              else if (num <= 50) cuenta['41-50']++;
              else cuenta['51-56']++;
            });
            
            // Buscar la d√©cada m√°s frecuente
            let decadaMasFrecuente = '1-10', max = 0;
            for (const d of decadas) {
              if (cuenta[d] > max) { decadaMasFrecuente = d; max = cuenta[d]; }
            }
            
            return {
              posicion: nombresPos[pos],
              decadaMasFrecuente,
              frecuencia: max
            };
          });
          
          // Mensaje clave din√°mico
          let datoClave = '';
          if (sorteo === 'melate') {
            datoClave = 'Los datos muestran una clara progresi√≥n: la d√©cada 1-10 es la m√°s frecuente para el 1er n√∫mero, la 11-20 para el 2do, y as√≠ sucesivamente.';
          } else if (sorteo === 'revancha') {
            datoClave = 'La tendencia es muy similar a Melate. Las d√©cadas listadas son las m√°s frecuentes para cada posici√≥n.';
          } else if (sorteo === 'revanchita') {
            datoClave = 'Revanchita confirma la inclinaci√≥n de las d√©cadas por posici√≥n.';
          }
          
          resultado[sorteo] = { decadasPorPosicion, datoClave };
        });
        
        return resultado;
      };
    }
  }).catch(error => {
    console.error('‚ùå Error al importar analizarDecadaPorPosicion:', error);
    // Implementar versi√≥n alternativa aqu√≠ si falla la importaci√≥n
  });
} catch (error) {
  console.error('‚ùå Error en la importaci√≥n din√°mica:', error);
}

// Implementaci√≥n de generarProyeccionesAnalisis
window.generarProyeccionesAnalisis = async function() {
  console.log('üìä Generando proyecciones usando funciones de an√°lisis...');
  
  // Verificar que existan los datos hist√≥ricos
  if (!window.datosHistoricos) {
    console.error('‚ùå No hay datos hist√≥ricos disponibles');
    return Promise.reject(new Error('No hay datos hist√≥ricos disponibles'));
  }
  
  const sorteos = ['melate', 'revancha', 'revanchita'];
  
  for (const sorteo of sorteos) {
    try {
      // Verificar que existan datos para este sorteo
      if (!window.datosHistoricos[sorteo] || !window.datosHistoricos[sorteo].numeros || window.datosHistoricos[sorteo].numeros.length === 0) {
        console.warn(`‚ö†Ô∏è No hay datos disponibles para ${sorteo}`);
        const elementoProyeccion = document.getElementById(`proyeccion-${sorteo}`);
        const elementoDetalle = document.getElementById(`detalle-${sorteo}`);
        if (elementoProyeccion) elementoProyeccion.textContent = 'Sin datos disponibles';
        if (elementoDetalle) elementoDetalle.textContent = 'Requiere datos hist√≥ricos';
        continue;
      }
      
      // Mostrar loading
      const elementoProyeccion = document.getElementById(`proyeccion-${sorteo}`);
      const elementoDetalle = document.getElementById(`detalle-${sorteo}`);
      if (elementoProyeccion) elementoProyeccion.textContent = 'üîÑ Analizando...';
      if (elementoDetalle) elementoDetalle.textContent = 'Procesando 4 tipos de an√°lisis...';
      
      // Funci√≥n interna para generar proyecci√≥n usando los 4 an√°lisis especificados
      const generarProyeccionPorAnalisis = async function(datos, nombreSorteo) {
        console.log(`üîÆ Generando proyecci√≥n para ${nombreSorteo}...`);
        
        // Verificar si tenemos los an√°lisis ya realizados
        if (!datos.sumAnalisis) {
          // Si no tenemos an√°lisis previo, intentamos hacerlo
          if (window.analizarSumaNumeros) {
            const analisisDatos = {};
            analisisDatos[nombreSorteo] = datos;
            datos.sumAnalisis = window.analizarSumaNumeros(analisisDatos)[nombreSorteo];
          }
        }
        
        if (!datos.paresAnalisis) {
          if (window.analizarParesImpares) {
            const analisisDatos = {};
            analisisDatos[nombreSorteo] = datos;
            datos.paresAnalisis = window.analizarParesImpares(analisisDatos)[nombreSorteo];
          }
        }
        
        if (!datos.decadaAnalisis) {
          if (window.analizarDecadaPorPosicion) {
            const analisisDatos = {};
            analisisDatos[nombreSorteo] = datos;
            datos.decadaAnalisis = window.analizarDecadaPorPosicion(analisisDatos)[nombreSorteo];
          }
        }
        
        // Generar los an√°lisis
        // 1. Por frecuencia
        const numerosFrecuentes = [];
        const frecuencias = {};
        datos.numeros.forEach(n => {
          frecuencias[n] = (frecuencias[n] || 0) + 1;
        });
        
        // Convertir a array y ordenar por frecuencia
        const frecArray = Object.entries(frecuencias)
          .map(([num, freq]) => ({ numero: parseInt(num), frecuencia: freq }))
          .sort((a, b) => b.frecuencia - a.frecuencia);
        
        // Tomar los 8 m√°s frecuentes
        for (let i = 0; i < Math.min(8, frecArray.length); i++) {
          numerosFrecuentes.push(frecArray[i].numero);
        }
        
        // 2. Por suma √≥ptima
        const numerosPorSuma = [];
        if (datos.sumAnalisis && datos.sumAnalisis.rangoMasFrecuente) {
          const rangoOptimo = datos.sumAnalisis.rangoMasFrecuente[0]; // '150-199', etc.
          const [min, max] = rangoOptimo.split('-').map(n => parseInt(n) || 300);
          
          // Generar n√∫meros que tiendan a sumar en ese rango
          const targetSum = (min + max) / 2; // Suma objetivo
          const avgPerNumber = targetSum / 6; // Promedio por n√∫mero
          
          for (let i = 0; i < 8; i++) {
            const variation = (Math.random() - 0.5) * 20; // Variaci√≥n de ¬±10
            const numero = Math.max(1, Math.min(56, Math.round(avgPerNumber + variation)));
            numerosPorSuma.push(numero);
          }
          numerosPorSuma.sort((a, b) => a - b);
        }
        
        // 3. Por balance pares/impares
        const numerosPorBalance = [];
        if (datos.paresAnalisis && datos.paresAnalisis.distribucionMasFrecuente) {
          const distribucionOptima = datos.paresAnalisis.distribucionMasFrecuente[0]; // '3p-3i', etc.
          const [pares] = distribucionOptima.split('-').map(s => parseInt(s.replace('p', '')));
          
          const numerosPares = [];
          const numerosImpares = [];
          
          // Generar pares e impares seg√∫n la distribuci√≥n √≥ptima
          for (let i = 2; i <= 56; i += 2) numerosPares.push(i);
          for (let i = 1; i <= 56; i += 2) numerosImpares.push(i);
          
          // Mezclar los arrays
          const mezclarArray = (array) => {
            const arr = [...array];
            for (let i = arr.length - 1; i > 0; i--) {
              const j = Math.floor(Math.random() * (i + 1));
              [arr[i], arr[j]] = [arr[j], arr[i]];
            }
            return arr;
          };
          
          // Seleccionar seg√∫n distribuci√≥n
          const paresSeleccionados = mezclarArray(numerosPares).slice(0, pares);
          const imparesSeleccionados = mezclarArray(numerosImpares).slice(0, 6 - pares);
          
          numerosPorBalance.push(...paresSeleccionados, ...imparesSeleccionados);
        }
        
        // 4. Por d√©cadas por posici√≥n
        const numerosPorDecada = [];
        if (datos.decadaAnalisis && datos.decadaAnalisis.decadasPorPosicion) {
          for (const posicionInfo of datos.decadaAnalisis.decadasPorPosicion) {
            const decadaOptima = posicionInfo.decadaMasFrecuente; // '1-10', '11-20', etc.
            const [min, max] = decadaOptima.split('-').map(n => parseInt(n));
            
            // Agregar algunos n√∫meros de esa d√©cada
            for (let i = min; i <= Math.min(max, 56); i++) {
              numerosPorDecada.push(i);
            }
          }
          
          // Seleccionar 8 n√∫meros √∫nicos de la mezcla
          const numerosUnicos = [...new Set(numerosPorDecada)];
          const mezclarArray = (array) => {
            const arr = [...array];
            for (let i = arr.length - 1; i > 0; i--) {
              const j = Math.floor(Math.random() * (i + 1));
              [arr[i], arr[j]] = [arr[j], arr[i]];
            }
            return arr;
          };
          
          // Si hay menos de 8 n√∫meros, completar con algunos aleatorios
          while (numerosUnicos.length < 8) {
            const num = Math.floor(Math.random() * 56) + 1;
            if (!numerosUnicos.includes(num)) numerosUnicos.push(num);
          }
          
          // Mezclar y tomar los primeros 8
          const numerosSeleccionados = mezclarArray(numerosUnicos).slice(0, 8);
          numerosPorDecada.length = 0; // Vaciar el array
          numerosPorDecada.push(...numerosSeleccionados);
        }
        
        // 5. N√∫meros aleatorios para complementar
        const numerosAleatorios = [];
        while (numerosAleatorios.length < 8) {
          const num = Math.floor(Math.random() * 56) + 1;
          if (!numerosAleatorios.includes(num)) numerosAleatorios.push(num);
        }
        
        // Combinar todos los an√°lisis seg√∫n los pesos especificados
        const pool = [];
        
        // Agregar n√∫meros seg√∫n los pesos (22%, 22%, 22%, 22%, 12%)
        numerosFrecuentes.forEach(num => pool.push(num, num)); // 2 veces (peso alto)
        numerosPorSuma.forEach(num => pool.push(num, num)); // 2 veces
        numerosPorBalance.forEach(num => pool.push(num, num)); // 2 veces  
        numerosPorDecada.forEach(num => pool.push(num, num)); // 2 veces
        numerosAleatorios.forEach(num => pool.push(num)); // 1 vez (peso bajo)
        
        // Seleccionar 6 n√∫meros √∫nicos del pool
        const numerosUnicos = [...new Set(pool)];
        const mezclarArray = (array) => {
          const arr = [...array];
          for (let i = arr.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [arr[i], arr[j]] = [arr[j], arr[i]];
          }
          return arr;
        };
        
        const combinacionFinal = mezclarArray(numerosUnicos).slice(0, 6).sort((a, b) => a - b);
        
        // Si no tenemos 6 n√∫meros, completar con aleatorios
        while (combinacionFinal.length < 6) {
          const num = Math.floor(Math.random() * 56) + 1;
          if (!combinacionFinal.includes(num)) {
            combinacionFinal.push(num);
          }
        }
        
        const detalle = 'Combinaciones generadas usando an√°lisis de frecuencias, suma de n√∫meros, balance pares/impares y d√©cadas por posici√≥n';
        
        return {
          numeros: combinacionFinal.sort((a, b) => a - b),
          detalle: detalle
        };
      };
      
      // Generar proyecci√≥n usando los 4 an√°lisis especificados
      const proyeccion = await generarProyeccionPorAnalisis(window.datosHistoricos[sorteo], sorteo);
      
      if (elementoProyeccion && proyeccion.numeros) {
        elementoProyeccion.textContent = proyeccion.numeros.join(' - ');
      }
      
      if (elementoDetalle && proyeccion.detalle) {
        elementoDetalle.textContent = proyeccion.detalle;
      }
      
      console.log(`‚úÖ Proyecci√≥n para ${sorteo}:`, proyeccion.numeros);
      console.log(`üìù Detalle ${sorteo}:`, proyeccion.detalle);
      
    } catch (error) {
      console.error(`‚ùå Error generando proyecci√≥n para ${sorteo}:`, error);
      const elementoProyeccion = document.getElementById(`proyeccion-${sorteo}`);
      const elementoDetalle = document.getElementById(`detalle-${sorteo}`);
      if (elementoProyeccion) elementoProyeccion.textContent = 'Error al procesar';
      if (elementoDetalle) elementoDetalle.textContent = 'Intente nuevamente';
    }
  }
  
  return Promise.resolve('Proyecciones generadas correctamente');
};

// Confirmar que las funciones est√°n disponibles
console.log('‚úÖ dataParserGlobal.js cargado correctamente');
console.log('üìä Funciones de an√°lisis disponibles globalmente:');
console.log('  - analizarSumaNumeros');
console.log('  - analizarParesImpares');
console.log('  - analizarDecadaPorPosicion');
console.log('  - generarPrediccionPorFrecuencia');
console.log('  - generarProyeccionesAnalisis');
