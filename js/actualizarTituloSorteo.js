// === actualizarTituloSorteo.js ===
// Funci√≥n simple para actualizar el t√≠tulo con el n√∫mero de sorteo correcto
// Sin depender de data loaders o c√°lculos complejos

/**
 * Actualiza el t√≠tulo de la p√°gina con el pr√≥ximo n√∫mero de sorteo.
 * Calcula din√°micamente el pr√≥ximo sorteo basado en los datos del CSV Melate.
 */
window.actualizarTituloSorteo = async function() {
  try {
    console.log('üéØ Actualizando t√≠tulo con el n√∫mero del pr√≥ximo sorteo...');
    
    // Calcular el pr√≥ximo sorteo basado en los datos hist√≥ricos
    let proximoSorteo = await calcularProximoSorteo();
    
    // Obtener solo el primer nombre del usuario (sin apellidos)
    let nombreUsuario = obtenerPrimerNombre();
    
    // Actualizar el elemento del t√≠tulo
    const tituloElement = document.getElementById('titulo-sorteo');
    if (tituloElement) {
      const nuevoTitulo = `üéØ Combinaciones sugeridas por IA para TI ${nombreUsuario} para el sorteo ${proximoSorteo}`;
      tituloElement.textContent = nuevoTitulo;
      console.log(`‚úÖ T√≠tulo actualizado: Sorteo ${proximoSorteo} para usuario ${nombreUsuario}`);
      console.log(`üìù T√≠tulo completo: "${nuevoTitulo}"`);
    } else {
      console.error('‚ùå Elemento titulo-sorteo no encontrado');
    }
    
    // Exponer el valor para que otras partes del c√≥digo puedan usarlo
    window.proximoSorteoMelate = proximoSorteo;
    
    return proximoSorteo;
  } catch (error) {
    console.error('‚ùå Error al actualizar el t√≠tulo:', error);
    
    // En caso de error, usar un mensaje gen√©rico pero con datos v√°lidos
    const tituloElement = document.getElementById('titulo-sorteo');
    if (tituloElement) {
      const nombreFallback = obtenerPrimerNombre();
      const sorteoFallback = 4091; // Pr√≥ximo despu√©s del √∫ltimo conocido (4090)
      const tituloFallback = `üéØ Combinaciones sugeridas por IA para TI ${nombreFallback} para el sorteo ${sorteoFallback}`;
      tituloElement.textContent = tituloFallback;
      console.log(`‚ö†Ô∏è Usando t√≠tulo de fallback: "${tituloFallback}"`);
    }
    
    return null;
  }
};

/**
 * Extrae solo el primer nombre del usuario (sin apellidos)
 */
function obtenerPrimerNombre() {
  let nombreUsuario = 'TI';  // Valor por defecto
  
  try {
    // Prioridad 1: Nombre completo del usuario autenticado
    if (window.usuarioActualNombre && window.usuarioActualNombre.trim()) {
      const nombreCompleto = window.usuarioActualNombre.trim();
      // Extraer solo el primer nombre (antes del primer espacio)
      nombreUsuario = nombreCompleto.split(' ')[0];
      console.log(`üë§ Usando primer nombre del displayName: "${nombreUsuario}"`);
    }
    // Prioridad 2: Email del usuario (parte antes del @)
    else if (window.usuarioActualEmail && window.usuarioActualEmail.trim()) {
      const email = window.usuarioActualEmail.trim();
      nombreUsuario = email.split('@')[0];
      // Si el nombre de usuario del email contiene puntos o n√∫meros, limpiar
      nombreUsuario = nombreUsuario.replace(/[._\d]/g, '');
      // Capitalizar primera letra
      nombreUsuario = nombreUsuario.charAt(0).toUpperCase() + nombreUsuario.slice(1).toLowerCase();
      console.log(`üìß Usando nombre del email: "${nombreUsuario}"`);
    }
    // Prioridad 3: UID del usuario (primeros 8 caracteres)
    else if (window.usuarioActualID && window.usuarioActualID.trim()) {
      nombreUsuario = `Usuario${window.usuarioActualID.substring(0, 4)}`;
      console.log(`üÜî Usando ID de usuario: "${nombreUsuario}"`);
    }
    
    // Limitar longitud m√°xima del nombre para el t√≠tulo
    if (nombreUsuario.length > 15) {
      nombreUsuario = nombreUsuario.substring(0, 15);
    }
    
  } catch (error) {
    console.error('‚ùå Error obteniendo primer nombre:', error);
    nombreUsuario = 'TI';
  }
  
  return nombreUsuario;
}

/**
 * Calcula el pr√≥ximo n√∫mero de sorteo basado en el √∫ltimo sorteo del archivo Melate.csv
 */
async function calcularProximoSorteo() {
  try {
    console.log('üî¢ Calculando pr√≥ximo sorteo desde datos hist√≥ricos...');
    
    // Primero intentar leer directamente el CSV
    try {
      const response = await fetch('assets/Melate.csv');
      if (response.ok) {
        const csvText = await response.text();
        const lineas = csvText.trim().split('\n');
        
        if (lineas.length >= 2) {
          // La primera l√≠nea despu√©s del header tiene el √∫ltimo sorteo
          const primeraLinea = lineas[1].trim();
          const columnas = primeraLinea.split(',');
          const ultimoSorteoNum = parseInt(columnas[1]) || 0;
          
          if (ultimoSorteoNum > 0) {
            const proximoSorteo = ultimoSorteoNum + 1;
            console.log(`‚úÖ Pr√≥ximo sorteo calculado desde CSV directo: ${proximoSorteo} (√∫ltimo: ${ultimoSorteoNum})`);
            return proximoSorteo;
          }
        }
      }
    } catch (csvError) {
      console.warn('‚ö†Ô∏è No se pudo leer CSV directamente:', csvError.message);
    }
    
    // Verificar si tenemos datos hist√≥ricos cargados como fallback
    if (window.datosHistoricos && window.datosHistoricos.melate && window.datosHistoricos.melate.sorteos) {
      const sorteosMelate = window.datosHistoricos.melate.sorteos;
      
      if (sorteosMelate.length > 0) {
        // Encontrar el n√∫mero de concurso m√°s alto
        let ultimoSorteoNum = 0;
        
        for (const sorteo of sorteosMelate) {
          const numConcurso = parseInt(sorteo.concurso);
          if (!isNaN(numConcurso) && numConcurso > ultimoSorteoNum) {
            ultimoSorteoNum = numConcurso;
          }
        }
        
        if (ultimoSorteoNum > 0) {
          const proximoSorteo = ultimoSorteoNum + 1;
          console.log(`‚úÖ Pr√≥ximo sorteo calculado desde datosHistoricos: ${proximoSorteo} (√∫ltimo: ${ultimoSorteoNum})`);
          return proximoSorteo;
        }
      }
    }
    
    // Fallback: usar c√°lculo estimado basado en la fecha
    console.log('‚ö†Ô∏è Datos hist√≥ricos no disponibles, usando c√°lculo estimado...');
    
    const fecha = new Date();
    const fechaReferencia = new Date(2025, 7, 1); // 1 de agosto de 2025 (mes 7 = agosto)
    const sorteoReferencia = 4090; // √öltimo sorteo conocido
    
    // Calcular diferencia en d√≠as
    const diferenciaMilisegundos = fecha - fechaReferencia;
    const diferenciaDias = Math.floor(diferenciaMilisegundos / (1000 * 60 * 60 * 24));
    
    // Estimar sorteos adicionales (Melate se realiza mi√©rcoles y domingo = ~2 por semana)
    const sorteosAdicionales = Math.floor(diferenciaDias / 3.5);
    
    // Calcular pr√≥ximo sorteo estimado
    const proximoSorteoEstimado = sorteoReferencia + Math.max(1, sorteosAdicionales);
    
    console.log(`üìä Pr√≥ximo sorteo estimado: ${proximoSorteoEstimado} (${sorteosAdicionales} sorteos desde referencia)`);
    
    // Asegurar un valor m√≠nimo razonable
    return Math.max(proximoSorteoEstimado, 4091);
    
  } catch (error) {
    console.error('‚ùå Error calculando pr√≥ximo sorteo:', error);
    // Fallback final
    return 4091;
  }
}

// Confirmar que la funci√≥n est√° disponible globalmente
console.log('‚úÖ Funci√≥n actualizarTituloSorteo disponible globalmente');
console.log('üîß actualizarTituloSorteo.js cargado correctamente');
